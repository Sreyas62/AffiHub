import uuid
from django.db import models
from django.core.validators import URLValidator
from users.models import User
from products.models import Product


class AffiliateLink(models.Model):
    """Model for tracking affiliate links generated by affiliates."""
    
    code = models.UUIDField(
        default=uuid.uuid4,
        editable=False,
        unique=True,
        help_text="Unique code for the affiliate link"
    )
    affiliate = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        limit_choices_to={'role': 'affiliate'},
        related_name='affiliate_links',
        help_text="Affiliate who owns this link"
    )
    product = models.ForeignKey(
        Product,
        on_delete=models.CASCADE,
        related_name='affiliate_links',
        help_text="Product being promoted"
    )
    custom_slug = models.SlugField(
        max_length=100,
        blank=True,
        null=True,
        help_text="Custom slug for the affiliate link"
    )
    landing_url = models.URLField(
        blank=True,
        null=True,
        validators=[URLValidator()],
        help_text="Custom landing page URL"
    )
    is_active = models.BooleanField(
        default=True,
        help_text="Whether this affiliate link is active"
    )
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    expires_at = models.DateTimeField(
        blank=True,
        null=True,
        help_text="Link expiration date"
    )

    class Meta:
        db_table = 'tracking_affiliate_link'
        verbose_name = 'Affiliate Link'
        verbose_name_plural = 'Affiliate Links'
        ordering = ['-created_at']
        unique_together = ['affiliate', 'product']
        indexes = [
            models.Index(fields=['code']),
            models.Index(fields=['affiliate']),
            models.Index(fields=['product']),
            models.Index(fields=['is_active']),
        ]

    def __str__(self):
        return f"{self.affiliate.username} - {self.product.name} ({self.code})"

    @property
    def click_count(self):
        """Get total clicks for this affiliate link."""
        return self.clicks.count()

    @property
    def conversion_count(self):
        """Get total conversions for this affiliate link."""
        return self.conversions.count()

    @property
    def conversion_rate(self):
        """Calculate conversion rate as percentage."""
        if self.click_count == 0:
            return 0
        return (self.conversion_count / self.click_count) * 100

    def get_tracking_url(self):
        """Get the full tracking URL for this affiliate link."""
        return f"/api/tracking/click/{self.code}/"


class Click(models.Model):
    """Model for tracking clicks on affiliate links."""
    
    affiliate_link = models.ForeignKey(
        AffiliateLink,
        on_delete=models.CASCADE,
        related_name='clicks',
        help_text="Affiliate link that was clicked"
    )
    ip_address = models.GenericIPAddressField(
        help_text="IP address of the visitor"
    )
    user_agent = models.TextField(
        help_text="User agent string of the visitor's browser"
    )
    referrer = models.URLField(
        blank=True,
        null=True,
        help_text="Referrer URL"
    )
    country = models.CharField(
        max_length=2,
        blank=True,
        null=True,
        help_text="Country code based on IP address"
    )
    device_type = models.CharField(
        max_length=20,
        choices=[
            ('desktop', 'Desktop'),
            ('mobile', 'Mobile'),
            ('tablet', 'Tablet'),
            ('unknown', 'Unknown'),
        ],
        default='unknown',
        help_text="Device type detected from user agent"
    )
    timestamp = models.DateTimeField(
        auto_now_add=True,
        help_text="When the click occurred"
    )

    class Meta:
        db_table = 'tracking_click'
        verbose_name = 'Click'
        verbose_name_plural = 'Clicks'
        ordering = ['-timestamp']
        indexes = [
            models.Index(fields=['affiliate_link']),
            models.Index(fields=['timestamp']),
            models.Index(fields=['ip_address']),
            models.Index(fields=['device_type']),
        ]

    def __str__(self):
        return f"Click on {self.affiliate_link.code} at {self.timestamp}"

    @property
    def is_mobile(self):
        """Check if the click came from a mobile device."""
        return self.device_type == 'mobile'

    @property
    def is_desktop(self):
        """Check if the click came from a desktop device."""
        return self.device_type == 'desktop'


class Conversion(models.Model):
    """Model for tracking conversions (sales) from affiliate links."""
    
    affiliate_link = models.ForeignKey(
        AffiliateLink,
        on_delete=models.CASCADE,
        related_name='conversions',
        help_text="Affiliate link that generated the conversion"
    )
    click = models.ForeignKey(
        Click,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name='conversion',
        help_text="Original click that led to this conversion"
    )
    order_id = models.CharField(
        max_length=100,
        blank=True,
        null=True,
        help_text="External order ID from merchant system"
    )
    amount = models.DecimalField(
        max_digits=10,
        decimal_places=2,
        help_text="Conversion amount (sale value)"
    )
    commission_amount = models.DecimalField(
        max_digits=10,
        decimal_places=2,
        help_text="Commission amount for the affiliate"
    )
    currency = models.CharField(
        max_length=3,
        default='USD',
        help_text="Currency code"
    )
    timestamp = models.DateTimeField(
        auto_now_add=True,
        help_text="When the conversion occurred"
    )
    verified = models.BooleanField(
        default=False,
        help_text="Whether this conversion has been verified"
    )
    notes = models.TextField(
        blank=True,
        help_text="Additional notes about the conversion"
    )

    class Meta:
        db_table = 'tracking_conversion'
        verbose_name = 'Conversion'
        verbose_name_plural = 'Conversions'
        ordering = ['-timestamp']
        indexes = [
            models.Index(fields=['affiliate_link']),
            models.Index(fields=['timestamp']),
            models.Index(fields=['verified']),
            models.Index(fields=['order_id']),
        ]

    def __str__(self):
        return f"Conversion ${self.amount} from {self.affiliate_link.code}"

    def save(self, *args, **kwargs):
        """Calculate commission amount if not provided."""
        if not self.commission_amount:
            commission_rate = self.affiliate_link.product.commission_rate
            self.commission_amount = (self.amount * commission_rate) / 100
        super().save(*args, **kwargs)

    @property
    def commission_rate(self):
        """Get the commission rate used for this conversion."""
        if self.amount > 0:
            return (self.commission_amount / self.amount) * 100
        return 0
